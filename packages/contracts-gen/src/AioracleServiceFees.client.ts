/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, HumanAddr, Coin, UpdateContractMsg, PagingFeesOptions} from "./types";
import {ExecuteMsg, GetContractInfoResponse, GetListServiceFeesResponse, ServiceFeesResponse, GetServiceFeesResponse, InstantiateMsg, QueryMsg} from "./AioracleServiceFees.types";
export interface AioracleServiceFeesReadOnlyInterface {
  contractAddress: string;
  getListServiceFees: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: string;
    order?: number;
  }) => Promise<GetListServiceFeesResponse>;
  getServiceFees: ({
    addr
  }: {
    addr: string;
  }) => Promise<GetServiceFeesResponse>;
  getContractInfo: () => Promise<GetContractInfoResponse>;
}
export class AioracleServiceFeesQueryClient implements AioracleServiceFeesReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getListServiceFees = this.getListServiceFees.bind(this);
    this.getServiceFees = this.getServiceFees.bind(this);
    this.getContractInfo = this.getContractInfo.bind(this);
  }

  getListServiceFees = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: string;
    order?: number;
  }): Promise<GetListServiceFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_list_service_fees: {
        limit,
        offset,
        order
      }
    });
  };
  getServiceFees = async ({
    addr
  }: {
    addr: string;
  }): Promise<GetServiceFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_service_fees: {
        addr
      }
    });
  };
  getContractInfo = async (): Promise<GetContractInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_contract_info: {}
    });
  };
}
export interface AioracleServiceFeesInterface extends AioracleServiceFeesReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateServiceFees: ({
    fees
  }: {
    fees: Coin;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  removeServiceFees: ($fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  updateInfo: ({
    creator,
    governance
  }: {
    creator?: HumanAddr;
    governance?: HumanAddr;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AioracleServiceFeesClient extends AioracleServiceFeesQueryClient implements AioracleServiceFeesInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateServiceFees = this.updateServiceFees.bind(this);
    this.removeServiceFees = this.removeServiceFees.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
  }

  updateServiceFees = async ({
    fees
  }: {
    fees: Coin;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_service_fees: {
        fees
      }
    }, $fee, $memo, $funds);
  };
  removeServiceFees = async ($fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_service_fees: {}
    }, $fee, $memo, $funds);
  };
  updateInfo = async ({
    creator,
    governance
  }: {
    creator?: HumanAddr;
    governance?: HumanAddr;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_info: {
        creator,
        governance
      }
    }, $fee, $memo, $funds);
  };
}