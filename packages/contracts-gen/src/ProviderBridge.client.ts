/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {HumanAddr, Uint128, Contracts, Coin} from "./types";
import {ExecuteMsg, GetBoundExecutorFeeResponse, GetParticipantFeeResponse, InstantiateMsg, QueryMsg, ServiceContractsMsgResponse, ServiceFeeMsgResponse} from "./ProviderBridge.types";
export interface ProviderBridgeReadOnlyInterface {
  contractAddress: string;
  serviceContractsMsg: ({
    service
  }: {
    service: string;
  }) => Promise<ServiceContractsMsgResponse>;
  serviceFeeMsg: ({
    service
  }: {
    service: string;
  }) => Promise<ServiceFeeMsgResponse>;
  getParticipantFee: ({
    addr
  }: {
    addr: HumanAddr;
  }) => Promise<GetParticipantFeeResponse>;
  getBoundExecutorFee: () => Promise<GetBoundExecutorFeeResponse>;
}
export class ProviderBridgeQueryClient implements ProviderBridgeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.serviceContractsMsg = this.serviceContractsMsg.bind(this);
    this.serviceFeeMsg = this.serviceFeeMsg.bind(this);
    this.getParticipantFee = this.getParticipantFee.bind(this);
    this.getBoundExecutorFee = this.getBoundExecutorFee.bind(this);
  }

  serviceContractsMsg = async ({
    service
  }: {
    service: string;
  }): Promise<ServiceContractsMsgResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      service_contracts_msg: {
        service
      }
    });
  };
  serviceFeeMsg = async ({
    service
  }: {
    service: string;
  }): Promise<ServiceFeeMsgResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      service_fee_msg: {
        service
      }
    });
  };
  getParticipantFee = async ({
    addr
  }: {
    addr: HumanAddr;
  }): Promise<GetParticipantFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_participant_fee: {
        addr
      }
    });
  };
  getBoundExecutorFee = async (): Promise<GetBoundExecutorFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bound_executor_fee: {}
    });
  };
}
export interface ProviderBridgeInterface extends ProviderBridgeReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateServiceContracts: ({
    contracts,
    service
  }: {
    contracts: Contracts;
    service: string;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    boundExecutorFee,
    owner,
    serviceFeesContract
  }: {
    boundExecutorFee?: Coin;
    owner?: HumanAddr;
    serviceFeesContract?: HumanAddr;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ProviderBridgeClient extends ProviderBridgeQueryClient implements ProviderBridgeInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateServiceContracts = this.updateServiceContracts.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  updateServiceContracts = async ({
    contracts,
    service
  }: {
    contracts: Contracts;
    service: string;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_service_contracts: {
        contracts,
        service
      }
    }, $fee, $memo, $funds);
  };
  updateConfig = async ({
    boundExecutorFee,
    owner,
    serviceFeesContract
  }: {
    boundExecutorFee?: Coin;
    owner?: HumanAddr;
    serviceFeesContract?: HumanAddr;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        bound_executor_fee: boundExecutorFee,
        owner,
        service_fees_contract: serviceFeesContract
      }
    }, $fee, $memo, $funds);
  };
}