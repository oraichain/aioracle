/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, HumanAddr, Coin, Binary, UpdateConfigMsg, Executor, TrustingPool} from "./types";
import {ConfigResponse, ExecuteMsg, GetBoundExecutorFeeResponse, GetExecutorResponse, GetExecutorSizeResponse, GetExecutorsByIndexResponse, GetExecutorsResponse, GetParticipantFeeResponse, GetRequestResponse, GetRequestsByMerkleRootResponse, RequestResponse, GetRequestsByServiceResponse, GetRequestsResponse, GetServiceContractsResponse, GetServiceFeesResponse, GetTrustingPoolResponse, GetTrustingPoolsResponse, TrustingPoolResponse, InstantiateMsg, IsClaimedResponse, LatestStageResponse, MigrateMsg, QueryMsg, StageInfoResponse, VerifyDataResponse} from "./AioracleV2.types";
export interface AioracleV2ReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  getExecutors: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<GetExecutorsResponse>;
  getExecutorsByIndex: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }) => Promise<GetExecutorsByIndexResponse>;
  getExecutor: ({
    pubkey
  }: {
    pubkey: Binary;
  }) => Promise<GetExecutorResponse>;
  getExecutorSize: () => Promise<GetExecutorSizeResponse>;
  getRequest: ({
    stage
  }: {
    stage: number;
  }) => Promise<GetRequestResponse>;
  getRequests: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }) => Promise<GetRequestsResponse>;
  getRequestsByService: ({
    limit,
    offset,
    order,
    service
  }: {
    limit?: number;
    offset?: number;
    order?: number;
    service: string;
  }) => Promise<GetRequestsByServiceResponse>;
  getRequestsByMerkleRoot: ({
    limit,
    merkleRoot,
    offset,
    order
  }: {
    limit?: number;
    merkleRoot: string;
    offset?: number;
    order?: number;
  }) => Promise<GetRequestsByMerkleRootResponse>;
  latestStage: () => Promise<LatestStageResponse>;
  stageInfo: () => Promise<StageInfoResponse>;
  getServiceContracts: ({
    stage
  }: {
    stage: number;
  }) => Promise<GetServiceContractsResponse>;
  isClaimed: ({
    executor,
    stage
  }: {
    executor: Binary;
    stage: number;
  }) => Promise<IsClaimedResponse>;
  verifyData: ({
    data,
    proof,
    stage
  }: {
    data: Binary;
    proof?: string[];
    stage: number;
  }) => Promise<VerifyDataResponse>;
  getServiceFees: ({
    service
  }: {
    service: string;
  }) => Promise<GetServiceFeesResponse>;
  getBoundExecutorFee: () => Promise<GetBoundExecutorFeeResponse>;
  getParticipantFee: ({
    pubkey
  }: {
    pubkey: Binary;
  }) => Promise<GetParticipantFeeResponse>;
  getTrustingPool: ({
    pubkey
  }: {
    pubkey: Binary;
  }) => Promise<GetTrustingPoolResponse>;
  getTrustingPools: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<GetTrustingPoolsResponse>;
}
export class AioracleV2QueryClient implements AioracleV2ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getExecutors = this.getExecutors.bind(this);
    this.getExecutorsByIndex = this.getExecutorsByIndex.bind(this);
    this.getExecutor = this.getExecutor.bind(this);
    this.getExecutorSize = this.getExecutorSize.bind(this);
    this.getRequest = this.getRequest.bind(this);
    this.getRequests = this.getRequests.bind(this);
    this.getRequestsByService = this.getRequestsByService.bind(this);
    this.getRequestsByMerkleRoot = this.getRequestsByMerkleRoot.bind(this);
    this.latestStage = this.latestStage.bind(this);
    this.stageInfo = this.stageInfo.bind(this);
    this.getServiceContracts = this.getServiceContracts.bind(this);
    this.isClaimed = this.isClaimed.bind(this);
    this.verifyData = this.verifyData.bind(this);
    this.getServiceFees = this.getServiceFees.bind(this);
    this.getBoundExecutorFee = this.getBoundExecutorFee.bind(this);
    this.getParticipantFee = this.getParticipantFee.bind(this);
    this.getTrustingPool = this.getTrustingPool.bind(this);
    this.getTrustingPools = this.getTrustingPools.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  getExecutors = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<GetExecutorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executors: {
        limit,
        offset,
        order
      }
    });
  };
  getExecutorsByIndex = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }): Promise<GetExecutorsByIndexResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executors_by_index: {
        limit,
        offset,
        order
      }
    });
  };
  getExecutor = async ({
    pubkey
  }: {
    pubkey: Binary;
  }): Promise<GetExecutorResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executor: {
        pubkey
      }
    });
  };
  getExecutorSize = async (): Promise<GetExecutorSizeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executor_size: {}
    });
  };
  getRequest = async ({
    stage
  }: {
    stage: number;
  }): Promise<GetRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_request: {
        stage
      }
    });
  };
  getRequests = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }): Promise<GetRequestsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests: {
        limit,
        offset,
        order
      }
    });
  };
  getRequestsByService = async ({
    limit,
    offset,
    order,
    service
  }: {
    limit?: number;
    offset?: number;
    order?: number;
    service: string;
  }): Promise<GetRequestsByServiceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests_by_service: {
        limit,
        offset,
        order,
        service
      }
    });
  };
  getRequestsByMerkleRoot = async ({
    limit,
    merkleRoot,
    offset,
    order
  }: {
    limit?: number;
    merkleRoot: string;
    offset?: number;
    order?: number;
  }): Promise<GetRequestsByMerkleRootResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests_by_merkle_root: {
        limit,
        merkle_root: merkleRoot,
        offset,
        order
      }
    });
  };
  latestStage = async (): Promise<LatestStageResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_stage: {}
    });
  };
  stageInfo = async (): Promise<StageInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      stage_info: {}
    });
  };
  getServiceContracts = async ({
    stage
  }: {
    stage: number;
  }): Promise<GetServiceContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_service_contracts: {
        stage
      }
    });
  };
  isClaimed = async ({
    executor,
    stage
  }: {
    executor: Binary;
    stage: number;
  }): Promise<IsClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_claimed: {
        executor,
        stage
      }
    });
  };
  verifyData = async ({
    data,
    proof,
    stage
  }: {
    data: Binary;
    proof?: string[];
    stage: number;
  }): Promise<VerifyDataResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_data: {
        data,
        proof,
        stage
      }
    });
  };
  getServiceFees = async ({
    service
  }: {
    service: string;
  }): Promise<GetServiceFeesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_service_fees: {
        service
      }
    });
  };
  getBoundExecutorFee = async (): Promise<GetBoundExecutorFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bound_executor_fee: {}
    });
  };
  getParticipantFee = async ({
    pubkey
  }: {
    pubkey: Binary;
  }): Promise<GetParticipantFeeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_participant_fee: {
        pubkey
      }
    });
  };
  getTrustingPool = async ({
    pubkey
  }: {
    pubkey: Binary;
  }): Promise<GetTrustingPoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_trusting_pool: {
        pubkey
      }
    });
  };
  getTrustingPools = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<GetTrustingPoolsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_trusting_pools: {
        limit,
        offset,
        order
      }
    });
  };
}
export interface AioracleV2Interface extends AioracleV2ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  registerMerkleRoot: ({
    executors,
    merkleRoot,
    stage
  }: {
    executors: Binary[];
    merkleRoot: string;
    stage: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  request: ({
    input,
    preferenceExecutorFee,
    service,
    threshold
  }: {
    input?: string;
    preferenceExecutorFee: Coin;
    service: string;
    threshold: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawFees: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  prepareWithdrawPool: ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  executorJoin: ({
    executor
  }: {
    executor: Binary;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  executorLeave: ({
    executor
  }: {
    executor: Binary;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  submitEvidence: ({
    proof,
    report,
    stage
  }: {
    proof?: string[];
    report: Binary;
    stage: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AioracleV2Client extends AioracleV2QueryClient implements AioracleV2Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.registerMerkleRoot = this.registerMerkleRoot.bind(this);
    this.request = this.request.bind(this);
    this.withdrawFees = this.withdrawFees.bind(this);
    this.prepareWithdrawPool = this.prepareWithdrawPool.bind(this);
    this.executorJoin = this.executorJoin.bind(this);
    this.executorLeave = this.executorLeave.bind(this);
    this.submitEvidence = this.submitEvidence.bind(this);
  }

  updateConfig = async ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        update_config_msg: updateConfigMsg
      }
    }, $fee, $memo, $funds);
  };
  registerMerkleRoot = async ({
    executors,
    merkleRoot,
    stage
  }: {
    executors: Binary[];
    merkleRoot: string;
    stage: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_merkle_root: {
        executors,
        merkle_root: merkleRoot,
        stage
      }
    }, $fee, $memo, $funds);
  };
  request = async ({
    input,
    preferenceExecutorFee,
    service,
    threshold
  }: {
    input?: string;
    preferenceExecutorFee: Coin;
    service: string;
    threshold: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request: {
        input,
        preference_executor_fee: preferenceExecutorFee,
        service,
        threshold
      }
    }, $fee, $memo, $funds);
  };
  withdrawFees = async ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_fees: {
        amount,
        denom
      }
    }, $fee, $memo, $funds);
  };
  prepareWithdrawPool = async ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      prepare_withdraw_pool: {
        pubkey
      }
    }, $fee, $memo, $funds);
  };
  executorJoin = async ({
    executor
  }: {
    executor: Binary;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      executor_join: {
        executor
      }
    }, $fee, $memo, $funds);
  };
  executorLeave = async ({
    executor
  }: {
    executor: Binary;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      executor_leave: {
        executor
      }
    }, $fee, $memo, $funds);
  };
  submitEvidence = async ({
    proof,
    report,
    stage
  }: {
    proof?: string[];
    report: Binary;
    stage: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_evidence: {
        proof,
        report,
        stage
      }
    }, $fee, $memo, $funds);
  };
}