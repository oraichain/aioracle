/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Binary, Addr, Uint128, UpdateConfigMsg, Coin, Config, Executor, Uint64, ArrayOfExecutor, Boolean} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, RequestResponse, ArrayOfRequestResponse, LatestStageResponse} from "./AioracleContract.types";
export interface AioracleContractReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  getExecutors: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<ArrayOfExecutor>;
  getExecutorsByIndex: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }) => Promise<ArrayOfExecutor>;
  getExecutor: ({
    pubkey
  }: {
    pubkey: Binary;
  }) => Promise<Executor>;
  getExecutorSize: () => Promise<Uint64>;
  getRequest: ({
    stage
  }: {
    stage: number;
  }) => Promise<RequestResponse>;
  getRequests: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }) => Promise<ArrayOfRequestResponse>;
  getRequestsByService: ({
    limit,
    offset,
    order,
    service
  }: {
    limit?: number;
    offset?: number;
    order?: number;
    service: string;
  }) => Promise<ArrayOfRequestResponse>;
  getRequestsByMerkleRoot: ({
    limit,
    merkleRoot,
    offset,
    order
  }: {
    limit?: number;
    merkleRoot: string;
    offset?: number;
    order?: number;
  }) => Promise<ArrayOfRequestResponse>;
  latestStage: () => Promise<LatestStageResponse>;
  verifyData: ({
    data,
    proof,
    stage
  }: {
    data: Binary;
    proof?: string[];
    stage: number;
  }) => Promise<Boolean>;
}
export class AioracleContractQueryClient implements AioracleContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.getExecutors = this.getExecutors.bind(this);
    this.getExecutorsByIndex = this.getExecutorsByIndex.bind(this);
    this.getExecutor = this.getExecutor.bind(this);
    this.getExecutorSize = this.getExecutorSize.bind(this);
    this.getRequest = this.getRequest.bind(this);
    this.getRequests = this.getRequests.bind(this);
    this.getRequestsByService = this.getRequestsByService.bind(this);
    this.getRequestsByMerkleRoot = this.getRequestsByMerkleRoot.bind(this);
    this.latestStage = this.latestStage.bind(this);
    this.verifyData = this.verifyData.bind(this);
  }

  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  getExecutors = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<ArrayOfExecutor> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executors: {
        limit,
        offset,
        order
      }
    });
  };
  getExecutorsByIndex = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }): Promise<ArrayOfExecutor> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executors_by_index: {
        limit,
        offset,
        order
      }
    });
  };
  getExecutor = async ({
    pubkey
  }: {
    pubkey: Binary;
  }): Promise<Executor> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executor: {
        pubkey
      }
    });
  };
  getExecutorSize = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_executor_size: {}
    });
  };
  getRequest = async ({
    stage
  }: {
    stage: number;
  }): Promise<RequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_request: {
        stage
      }
    });
  };
  getRequests = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: number;
    order?: number;
  }): Promise<ArrayOfRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests: {
        limit,
        offset,
        order
      }
    });
  };
  getRequestsByService = async ({
    limit,
    offset,
    order,
    service
  }: {
    limit?: number;
    offset?: number;
    order?: number;
    service: string;
  }): Promise<ArrayOfRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests_by_service: {
        limit,
        offset,
        order,
        service
      }
    });
  };
  getRequestsByMerkleRoot = async ({
    limit,
    merkleRoot,
    offset,
    order
  }: {
    limit?: number;
    merkleRoot: string;
    offset?: number;
    order?: number;
  }): Promise<ArrayOfRequestResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_requests_by_merkle_root: {
        limit,
        merkle_root: merkleRoot,
        offset,
        order
      }
    });
  };
  latestStage = async (): Promise<LatestStageResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      latest_stage: {}
    });
  };
  verifyData = async ({
    data,
    proof,
    stage
  }: {
    data: Binary;
    proof?: string[];
    stage: number;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_data: {
        data,
        proof,
        stage
      }
    });
  };
}
export interface AioracleContractInterface extends AioracleContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  registerMerkleRoot: ({
    executors,
    merkleRoot,
    stage
  }: {
    executors: string[];
    merkleRoot: string;
    stage: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  request: ({
    input,
    preferenceExecutorFee,
    service,
    threshold
  }: {
    input?: Binary;
    preferenceExecutorFee: Coin;
    service: string;
    threshold: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AioracleContractClient extends AioracleContractQueryClient implements AioracleContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.registerMerkleRoot = this.registerMerkleRoot.bind(this);
    this.request = this.request.bind(this);
  }

  updateConfig = async ({
    updateConfigMsg
  }: {
    updateConfigMsg: UpdateConfigMsg;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        update_config_msg: updateConfigMsg
      }
    }, $fee, $memo, $funds);
  };
  registerMerkleRoot = async ({
    executors,
    merkleRoot,
    stage
  }: {
    executors: string[];
    merkleRoot: string;
    stage: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_merkle_root: {
        executors,
        merkle_root: merkleRoot,
        stage
      }
    }, $fee, $memo, $funds);
  };
  request = async ({
    input,
    preferenceExecutorFee,
    service,
    threshold
  }: {
    input?: Binary;
    preferenceExecutorFee: Coin;
    service: string;
    threshold: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request: {
        input,
        preference_executor_fee: preferenceExecutorFee,
        service,
        threshold
      }
    }, $fee, $memo, $funds);
  };
}