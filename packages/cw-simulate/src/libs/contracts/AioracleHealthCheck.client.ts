/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {HumanAddr, Uint128, Binary, Coin, PingInfo} from "./types";
import {ExecuteMsg, GetPingInfoResponse, GetPingInfosResponse, QueryPingInfosResponse, GetReadPingInfoResponse, GetStateResponse, InstantiateMsg, MigrateMsg, QueryMsg} from "./AioracleHealthCheck.types";
export interface AioracleHealthCheckReadOnlyInterface {
  contractAddress: string;
  getPingInfo: () => Promise<GetPingInfoResponse>;
  getReadPingInfo: () => Promise<GetReadPingInfoResponse>;
  getPingInfos: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<GetPingInfosResponse>;
  getState: () => Promise<GetStateResponse>;
}
export class AioracleHealthCheckQueryClient implements AioracleHealthCheckReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getPingInfo = this.getPingInfo.bind(this);
    this.getReadPingInfo = this.getReadPingInfo.bind(this);
    this.getPingInfos = this.getPingInfos.bind(this);
    this.getState = this.getState.bind(this);
  }

  getPingInfo = async (): Promise<GetPingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ping_info: {}
    });
  };
  getReadPingInfo = async (): Promise<GetReadPingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_read_ping_info: {}
    });
  };
  getPingInfos = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<GetPingInfosResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_ping_infos: {
        limit,
        offset,
        order
      }
    });
  };
  getState = async (): Promise<GetStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_state: {}
    });
  };
}
export interface AioracleHealthCheckInterface extends AioracleHealthCheckReadOnlyInterface {
  contractAddress: string;
  sender: string;
  changeState: ({
    aioracleAddr,
    baseReward,
    maxRewardClaim,
    owner,
    pingJump,
    pingJumpInterval
  }: {
    aioracleAddr?: HumanAddr;
    baseReward?: Coin;
    maxRewardClaim?: Uint128;
    owner?: HumanAddr;
    pingJump?: number;
    pingJumpInterval?: number;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  ping: ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  claimReward: ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AioracleHealthCheckClient extends AioracleHealthCheckQueryClient implements AioracleHealthCheckInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.changeState = this.changeState.bind(this);
    this.ping = this.ping.bind(this);
    this.claimReward = this.claimReward.bind(this);
  }

  changeState = async ({
    aioracleAddr,
    baseReward,
    maxRewardClaim,
    owner,
    pingJump,
    pingJumpInterval
  }: {
    aioracleAddr?: HumanAddr;
    baseReward?: Coin;
    maxRewardClaim?: Uint128;
    owner?: HumanAddr;
    pingJump?: number;
    pingJumpInterval?: number;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_state: {
        aioracle_addr: aioracleAddr,
        base_reward: baseReward,
        max_reward_claim: maxRewardClaim,
        owner,
        ping_jump: pingJump,
        ping_jump_interval: pingJumpInterval
      }
    }, $fee, $memo, $funds);
  };
  ping = async ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ping: {
        pubkey
      }
    }, $fee, $memo, $funds);
  };
  claimReward = async ({
    pubkey
  }: {
    pubkey: Binary;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_reward: {
        pubkey
      }
    }, $fee, $memo, $funds);
  };
}