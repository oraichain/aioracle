/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import {HandleMsg, TestCaseMsg, Uint128, InitMsg, Coin, Binary} from "./types";
import {QueryMsg} from "./TcaseEmpty.types";
export interface TcaseEmptyReadOnlyInterface {
  contractAddress: string;
  getOwner: () => Promise<GetOwnerResponse>;
  getTestCases: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<GetTestCasesResponse>;
  assert: ({
    assertInputs
  }: {
    assertInputs: string[];
  }) => Promise<AssertResponse>;
}
export class TcaseEmptyQueryClient implements TcaseEmptyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getOwner = this.getOwner.bind(this);
    this.getTestCases = this.getTestCases.bind(this);
    this.assert = this.assert.bind(this);
  }

  getOwner = async (): Promise<GetOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_owner: {}
    });
  };
  getTestCases = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<GetTestCasesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_test_cases: {
        limit,
        offset,
        order
      }
    });
  };
  assert = async ({
    assertInputs
  }: {
    assertInputs: string[];
  }): Promise<AssertResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assert: {
        assert_inputs: assertInputs
      }
    });
  };
}