/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {HumanAddr, TestCaseMsg, Uint128, Coin, Binary} from "./types";
import {AssertResponse, ExecuteMsg, GetOwnerResponse, GetTestCasesResponse, InstantiateMsg, QueryMsg} from "./TcaseFlowerClassification.types";
export interface TcaseFlowerClassificationReadOnlyInterface {
  contractAddress: string;
  getOwner: () => Promise<GetOwnerResponse>;
  getTestCases: ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }) => Promise<GetTestCasesResponse>;
  assert: ({
    assertInputs
  }: {
    assertInputs: string[];
  }) => Promise<AssertResponse>;
}
export class TcaseFlowerClassificationQueryClient implements TcaseFlowerClassificationReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getOwner = this.getOwner.bind(this);
    this.getTestCases = this.getTestCases.bind(this);
    this.assert = this.assert.bind(this);
  }

  getOwner = async (): Promise<GetOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_owner: {}
    });
  };
  getTestCases = async ({
    limit,
    offset,
    order
  }: {
    limit?: number;
    offset?: Binary;
    order?: number;
  }): Promise<GetTestCasesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_test_cases: {
        limit,
        offset,
        order
      }
    });
  };
  assert = async ({
    assertInputs
  }: {
    assertInputs: string[];
  }): Promise<AssertResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assert: {
        assert_inputs: assertInputs
      }
    });
  };
}
export interface TcaseFlowerClassificationInterface extends TcaseFlowerClassificationReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setOwner: ({
    owner
  }: {
    owner: string;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  addTestCase: ({
    testCase
  }: {
    testCase: TestCaseMsg;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  removeTestCase: ({
    input
  }: {
    input: string[];
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TcaseFlowerClassificationClient extends TcaseFlowerClassificationQueryClient implements TcaseFlowerClassificationInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setOwner = this.setOwner.bind(this);
    this.addTestCase = this.addTestCase.bind(this);
    this.removeTestCase = this.removeTestCase.bind(this);
  }

  setOwner = async ({
    owner
  }: {
    owner: string;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_owner: {
        owner
      }
    }, $fee, $memo, $funds);
  };
  addTestCase = async ({
    testCase
  }: {
    testCase: TestCaseMsg;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_test_case: {
        test_case: testCase
      }
    }, $fee, $memo, $funds);
  };
  removeTestCase = async ({
    input
  }: {
    input: string[];
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_test_case: {
        input
      }
    }, $fee, $memo, $funds);
  };
}